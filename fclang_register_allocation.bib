
@inproceedings{hans_l_bodlaender_linear-time_1997,
	title = {Linear-{Time} {Register} {Allocation} for a {Fixed} {Number} of {Registers} and no {Stack} {Variables}},
	url = {https://www.researchgate.net/profile/Jens-Gustedt/publication/2396448_Linear-Time_Register_Allocation_for_a_Fixed_Number_of_Registers/links/0912f50a6361b0e8ae000000/Linear-Time-Register-Allocation-for-a-Fixed-Number-of-Registers.pdf},
	doi = {10.1145/314613.314994},
	author = {{Hans L. Bodlaender} and {Jens Gustedt} and {Jan Arne Telle}},
	year = {1997},
}

@article{poletto_linear_1999,
	title = {Linear scan register allocation},
	volume = {21},
	issn = {0164-0925, 1558-4593},
	url = {https://dl.acm.org/doi/10.1145/330249.330250},
	doi = {10.1145/330249.330250},
	abstract = {We describe a new algorithm for fast global register allocation called
              linear scan
              . This algorithm is not based on graph coloring, but allocates registers to variables in a single linear-time scan of the variables' live ranges. The linear scan algorithm is considerably faster than algorithms based on graph coloring, is simple to implement, and results in code that is almost as efficient as that obtained using more complex and time-consuming register allocators based on graph coloring. The algorithm is of interest in applications where compile time is a concern, such as dynamic compilation systems, “just-in-time” compilers, and interactive development environments.},
	language = {en},
	number = {5},
	urldate = {2025-02-21},
	journal = {ACM Transactions on Programming Languages and Systems},
	author = {Poletto, Massimiliano and Sarkar, Vivek},
	month = sep,
	year = {1999},
	pages = {895--913},
	file = {Full Text:/home/fistandatilus/Zotero/storage/HQVPBS98/Poletto and Sarkar - 1999 - Linear scan register allocation.pdf:application/pdf},
}

@incollection{hutchison_register_2005,
	address = {Berlin, Heidelberg},
	title = {Register {Allocation} {Via} {Coloring} of {Chordal} {Graphs}},
	volume = {3780},
	isbn = {978-3-540-29735-2 978-3-540-32247-4},
	url = {http://link.springer.com/10.1007/11575467_21},
	urldate = {2025-02-21},
	booktitle = {Programming {Languages} and {Systems}},
	publisher = {Springer Berlin Heidelberg},
	author = {Pereira, Fernando Magno Quintão and Palsberg, Jens},
	editor = {Hutchison, David and Kanade, Takeo and Kittler, Josef and Kleinberg, Jon M. and Mattern, Friedemann and Mitchell, John C. and Naor, Moni and Nierstrasz, Oscar and Pandu Rangan, C. and Steffen, Bernhard and Sudan, Madhu and Terzopoulos, Demetri and Tygar, Dough and Vardi, Moshe Y. and Weikum, Gerhard and Yi, Kwangkeun},
	year = {2005},
	doi = {10.1007/11575467_21},
	note = {Series Title: Lecture Notes in Computer Science},
	pages = {315--329},
}

@article{chaitin_register_1981,
	title = {Register allocation via coloring},
	volume = {6},
	copyright = {https://www.elsevier.com/tdm/userlicense/1.0/},
	issn = {00960551},
	url = {https://linkinghub.elsevier.com/retrieve/pii/0096055181900485},
	doi = {10.1016/0096-0551(81)90048-5},
	language = {en},
	number = {1},
	urldate = {2025-02-21},
	journal = {Computer Languages},
	author = {Chaitin, Gregory J. and Auslander, Marc A. and Chandra, Ashok K. and Cocke, John and Hopkins, Martin E. and Markstein, Peter W.},
	month = jan,
	year = {1981},
	pages = {47--57},
}

@incollection{krishnamurthi_extended_2007,
	address = {Berlin, Heidelberg},
	title = {Extended {Linear} {Scan}: {An} {Alternate} {Foundation} for {Global} {Register} {Allocation}},
	volume = {4420},
	isbn = {978-3-540-71228-2 978-3-540-71229-9},
	shorttitle = {Extended {Linear} {Scan}},
	url = {http://link.springer.com/10.1007/978-3-540-71229-9_10},
	language = {en},
	urldate = {2025-03-23},
	booktitle = {Compiler {Construction}},
	publisher = {Springer Berlin Heidelberg},
	author = {Sarkar, Vivek and Barik, Rajkishore},
	editor = {Krishnamurthi, Shriram and Odersky, Martin},
	year = {2007},
	doi = {10.1007/978-3-540-71229-9_10},
	note = {Series Title: Lecture Notes in Computer Science},
	pages = {141--155},
	file = {Full Text:/home/fistandatilus/Zotero/storage/B52RFMTI/Sarkar and Barik - 2007 - Extended Linear Scan An Alternate Foundation for .pdf:application/pdf},
}

@misc{chandran_practical_2011,
	title = {Practical and theoretical improvements for bipartite matching using the pseudoflow algorithm},
	url = {http://arxiv.org/abs/1105.1569},
	doi = {10.48550/arXiv.1105.1569},
	abstract = {We show that the pseudoflow algorithm for maximum flow is particularly efficient for the bipartite matching problem both in theory and in practice. We develop several implementations of the pseudoflow algorithm for bipartite matching, and compare them over a wide set of benchmark instances to state-of-the-art implementations of push-relabel and augmenting path algorithms that are specifically designed to solve these problems. The experiments show that the pseudoflow variants are in most cases faster than the other algorithms. We also show that one particular implementation---the matching pseudoflow algorithm---is theoretically efficient. For a graph with \$n\$ nodes, \$m\$ arcs, \$n\_1\$ the size of the smaller set in the bipartition, and the maximum matching value \${\textbackslash}kappa {\textbackslash}leq n\_1\$, the algorithm's complexity given input in the form of adjacency lists is \$O({\textbackslash}min\{n\_1{\textbackslash}kappa,m\} + {\textbackslash}sqrt\{{\textbackslash}kappa\}{\textbackslash}min\{{\textbackslash}kappa{\textasciicircum}2,m\})\$. Similar algorithmic ideas are shown to work for an adaptation of Hopcroft and Karp's bipartite matching algorithm with the same complexity. Using boolean operations on words of size \${\textbackslash}lambda\$, the complexity of the pseudoflow algorithm is further improved to \$O({\textbackslash}min\{n\_1{\textbackslash}kappa, {\textbackslash}frac\{n\_1n\_2\}\{{\textbackslash}lambda\}, m\} + {\textbackslash}kappa{\textasciicircum}2 + {\textbackslash}frac\{{\textbackslash}kappa{\textasciicircum}\{2.5\}\}\{{\textbackslash}lambda\})\$. This run time is faster than for previous algorithms such as Cheriyan and Mehlhorn's algorithm of complexity \$O({\textbackslash}frac\{n{\textasciicircum}\{2.5\}\}\{{\textbackslash}lambda\})\$.},
	urldate = {2025-04-06},
	publisher = {arXiv},
	author = {Chandran, Bala G. and Hochbaum, Dorit S.},
	month = may,
	year = {2011},
	note = {arXiv:1105.1569 [cs]},
	keywords = {Computer Science - Data Structures and Algorithms},
	file = {Preprint PDF:/home/fistandatilus/Zotero/storage/CDT4JQBU/Chandran and Hochbaum - 2011 - Practical and theoretical improvements for bipartite matching using the pseudoflow algorithm.pdf:application/pdf;Snapshot:/home/fistandatilus/Zotero/storage/6LIEDCGN/1105.html:text/html},
}

@misc{noauthor_helpful_nodate,
	title = {helpful post on stack exchange},
	url = {https://cstheory.stackexchange.com/questions/32885/matrix-permanent-is-0},
	urldate = {2025-04-06},
	journal = {cstheory.stackexchange.com},
}

@misc{llvm_greedy_2011,
	title = {Greedy {Register} {Allocation} in {LLVM} 3.0},
	url = {https://blog.llvm.org/2011/09/greedy-register-allocation-in-llvm-30.html},
	language = {English},
	urldate = {2025-03-31},
	author = {{LLVM}},
	month = sep,
	year = {2011},
}

@inproceedings{briggs_rematerialization_1992,
	address = {San Francisco, California, United States},
	title = {Rematerialization},
	isbn = {978-0-89791-475-8},
	url = {http://portal.acm.org/citation.cfm?doid=143095.143143},
	doi = {10.1145/143095.143143},
	language = {en},
	urldate = {2025-03-31},
	booktitle = {Proceedings of the {ACM} {SIGPLAN} 1992 conference on {Programming} language design and implementation  - {PLDI} '92},
	publisher = {ACM Press},
	author = {Briggs, Preston and Cooper, Keith D. and Torczon, Linda},
	year = {1992},
	pages = {311--321},
	file = {Full Text:/home/fistandatilus/Zotero/storage/IR74CGDN/Briggs et al. - 1992 - Rematerialization.pdf:application/pdf},
}

@inproceedings{____2023,
	address = {Москва},
	series = {Секция механики},
	title = {Низкоуровневый язык программирования с опциональной типизацией},
	language = {ru},
	booktitle = {Ломоносовские чтения},
	publisher = {Издательство Московского университета},
	author = {{Кривчиков Максим Александрович}},
	year = {2023},
	pages = {96},
}

@article{george_iterated_1996,
	title = {Iterated register coalescing},
	volume = {18},
	issn = {0164-0925, 1558-4593},
	url = {https://dl.acm.org/doi/10.1145/229542.229546},
	doi = {10.1145/229542.229546},
	abstract = {An important function of any register allocator is to target registers so as to eliminate copy instructions. Graph-coloring register allocation is an elegant approach to this problem. If the source and destination of a move instruction do not interfere, then their nodes can be coalesced in the interference graph. Chaitin's coalescing heuristic could make a graph uncolorable (i.e., introduce spills); Briggs et al. demonstrated a conservative coalescing heuristic that preserves colorability. But Briggs's algorithm is
              too
              conservative and leaves too many move instructions in our programs. We show how to interleave coloring reductions with Briggs's coalescing heuristic, leading to an algorithm that is safe but much more aggressive.},
	language = {en},
	number = {3},
	urldate = {2025-03-30},
	journal = {ACM Transactions on Programming Languages and Systems},
	author = {George, Lal and Appel, Andrew W.},
	month = may,
	year = {1996},
	pages = {300--324},
	file = {Full Text:/home/fistandatilus/Zotero/storage/IWKC4XCL/George and Appel - 1996 - Iterated register coalescing.pdf:application/pdf},
}

@article{valiant_complexity_1979,
	title = {The complexity of computing the permanent},
	volume = {8},
	copyright = {https://www.elsevier.com/tdm/userlicense/1.0/},
	issn = {03043975},
	url = {https://linkinghub.elsevier.com/retrieve/pii/0304397579900446},
	doi = {10.1016/0304-3975(79)90044-6},
	language = {en},
	number = {2},
	urldate = {2025-04-29},
	journal = {Theoretical Computer Science},
	author = {Valiant, L.G.},
	year = {1979},
	pages = {189--201},
}
